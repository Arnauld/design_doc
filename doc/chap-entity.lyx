#LyX 1.6.7 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding utf8
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Section
Entity
\end_layout

\begin_layout Subsection
Entity-Attribute-Value and Type Object
\end_layout

\begin_layout Standard
Entity-Attribute-Value is a common pattern that allows dynamic and extensible
 definition of entity.
 It allows to design the entities in such a way that attributes (properties
 or parameters) could be added dynamically without the need to change the
 database schema.
 
\end_layout

\begin_layout Standard
The dynamic model feature enables dynamic customisation of models and is
 also applicable to a multi-tenant environment.
 
\end_layout

\begin_layout Standard
Basically the roles could be summarized:
\end_layout

\begin_layout Itemize
The entity: the item being described.
 One uses the word "entity" to refer to the structures used to store and
 manage data.
 Conceptually, entity is often compared to a table in a database, whereas
 an instance of entity, a record, would be a row of the table.
 However, entities include much more than a database table.
 An entity includes definitions of the properties, views, and behavior of
 the application related to a specific record type.
 For example, an entity 
\begin_inset Quotes eld
\end_inset

Person
\begin_inset Quotes erd
\end_inset

 will have 
\begin_inset Quotes eld
\end_inset

FirstName
\begin_inset Quotes erd
\end_inset

 and 
\begin_inset Quotes eld
\end_inset

LastName
\begin_inset Quotes erd
\end_inset

 as properties, 
\begin_inset Quotes eld
\end_inset

Colt Seavers
\begin_inset Quotes erd
\end_inset

 would be an instance of a 
\begin_inset Quotes eld
\end_inset

Person
\begin_inset Quotes erd
\end_inset

.
 For clarity reason, the definition of an Entity will be called an Entity
 Descriptor, in other words, an entity is described by an Entity Descriptor.
\end_layout

\begin_layout Itemize
The attribute is also called parameter, field or property.
 Each attribute in an entity descriptor represents an attribute of the entity.
 An attribute is described by an Attribute Descriptor.
 The Attribute Descriptor contains the name of the attribute, its data type,
 its displayable labels or descriptions, zero or more constraints on the
 values accepted...
 For example, the attribute 
\begin_inset Quotes eld
\end_inset

FirstName
\begin_inset Quotes erd
\end_inset

 is an attribute with data type 
\begin_inset Quotes eld
\end_inset

String
\begin_inset Quotes erd
\end_inset

 and labels 
\begin_inset Quotes eld
\end_inset

First name
\begin_inset Quotes erd
\end_inset

, 
\begin_inset Quotes eld
\end_inset

Prénom
\begin_inset Quotes erd
\end_inset

 ...
\end_layout

\begin_layout Itemize
The value of the attribute for an instance of entity.
 For example, 
\begin_inset Quotes eld
\end_inset

Colt
\begin_inset Quotes erd
\end_inset

 is the value of the attribute 
\begin_inset Quotes eld
\end_inset

FirstName
\begin_inset Quotes erd
\end_inset

 of the entity 
\begin_inset Quotes eld
\end_inset

Colt Seavers
\begin_inset Quotes erd
\end_inset

.
\end_layout

\begin_layout Standard
The mapping to OO class is straigthforward: 
\end_layout

\begin_layout Itemize
an entity is described by an entity descriptor: an instance is described
 by its class
\end_layout

\begin_layout Itemize
attribute: class's fields
\end_layout

\begin_layout Itemize
the attribute value of the entity: the value of the corresponding field
 instance
\end_layout

\begin_layout Standard
From TypeObject Pattern:
\end_layout

\begin_layout Quotation
Decouple instances from their classes so that those classes can be implemented
 as instances of a class.
 Type Object allows new "classes" to be created dynamically at runtime
\end_layout

\begin_layout Standard
Similarly new entity descriptor could be created or modified at runtime.
\end_layout

\begin_layout Paragraph*
The document will use the following terminology:
\end_layout

\begin_layout Itemize
An 
\emph on
entity
\emph default
 is described by an 
\emph on
entity descriptor
\end_layout

\begin_layout Itemize
A 
\emph on
property descriptor
\emph default
 describes a 
\emph on
property
\emph default
: its name, data type, constraints...
\end_layout

\begin_layout Itemize
An 
\emph on
entity descriptor
\emph default
 references several 
\emph on
property descriptors
\emph default
.
\end_layout

\begin_layout Itemize
An 
\emph on
entity
\emph default
 is composed of several 
\emph on
properties.

\emph default
 Each 
\emph on
property
\emph default
 is described by its corresponding 
\emph on
property descriptor
\emph default
.
 A 
\emph on
property
\emph default
 have one or more value whose types match the 
\emph on
data type
\emph default
 in 
\emph on
property descriptor
\end_layout

\begin_layout Standard
Thus one will have the Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "Flo:EAV-Diagram"

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Entity-Attribute-Value and descriptors
\end_layout

\end_inset


\begin_inset CommandInset label
LatexCommand label
name "Flo:EAV-Diagram"

\end_inset


\begin_inset Graphics
	filename diagrams/entity-def.png
	scale 50

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Notes on Namespace
\end_layout

\begin_layout Standard
Namespace will have a dedicated section to describe it.
 Briefly a namespace provides a context for the items it holds.
 An item can belong to only one namespace at a given time.
 
\end_layout

\begin_layout Standard
Namespaces allow to group entities, properties or descriptors under a name
 or dedicated scope.
 This way the global scope can be divided in "sub-scopes", each one with
 its own name.
 This allows disambiguation of homonym items having the same name (residing
 in different namespaces).
 Namespace could be used for multi-tenant management, more on this later.
 By default, an entity belongs to the same namespace as its descriptor.
\end_layout

\begin_layout Subsubsection
Further readings
\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "Wikipedia: EAV"
target "http://en.wikipedia.org/wiki/Entity-attribute-value_model"

\end_inset


\end_layout

\begin_layout Itemize
\begin_inset CommandInset href
LatexCommand href
name "EAV/CR Data Modelling"
target "http://ycmi.med.yale.edu/nadkarni/eav_cr_frame.htm"

\end_inset


\end_layout

\begin_layout Itemize
The Type Object Pattern - Ralph Johnson and Bobby Woolf
\end_layout

\begin_layout Subsection
Data Types
\end_layout

\begin_layout Standard
This subsection describes all the 
\emph on
data type
\emph default
 that could be supported for 
\emph on
property
\emph default
.
 The property descriptor is defined by its name, its data type and zero
 or more constraints on the value accepted.
 Since the constraints are mainly dependant on the data type, for each datatype
 one describes its specific constraints available.
 All constraints can be negate, and thus the negate counterpart is not indicated.
\end_layout

\begin_layout Subsubsection
String
\end_layout

\begin_layout Standard
...
 an UTF8 character sequence.
 Database type can change (varchar2, text/clob) depending on the maximum
 length definition.
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

Colonel Jack O'Neil
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset

L'Arche de vérité
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Paragraph*
View
\end_layout

\begin_layout Standard
Usually a string is displayed in a textfield.
\end_layout

\begin_layout Paragraph
Constraints
\end_layout

\begin_layout Itemize
empty, not_empty
\end_layout

\begin_layout Itemize
length [>, <,<=, >=] 
\emph on
a
\end_layout

\begin_layout Itemize
regex [match, find]
\end_layout

\begin_deeper
\begin_layout Itemize
\begin_inset Quotes eld
\end_inset


\emph on
CoLOnel
\emph default

\begin_inset Quotes erd
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
matches [a-zA-Z0-9]+
\end_layout

\begin_layout Itemize
does not match [A-Z0-9]+
\end_layout

\begin_layout Itemize
contains[a-zA-Z0-9]+ and [A-Z0-9]+
\end_layout

\begin_layout Itemize
does not contain [0-9]+
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
mask aka glob [match, find] a simplified form of regex
\end_layout

\begin_deeper
\begin_layout Itemize
# designate a digits 0-9
\end_layout

\begin_layout Itemize
* any numbers of characters (wildcard matching)
\end_layout

\begin_layout Itemize
? any character
\end_layout

\begin_layout Itemize
\begin_inset Quotes eld
\end_inset


\emph on
a2345:15:aebc4
\emph default

\begin_inset Quotes erd
\end_inset


\end_layout

\begin_deeper
\begin_layout Itemize
matches 
\emph on

\begin_inset Quotes eld
\end_inset

a####:##:aebc#
\emph default

\begin_inset Quotes erd
\end_inset

, 
\emph on

\begin_inset Quotes eld
\end_inset

?????:??:????
\emph default

\begin_inset Quotes erd
\end_inset

, 
\emph on

\begin_inset Quotes eld
\end_inset

*:##:*
\emph default

\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
does not match 
\begin_inset Quotes eld
\end_inset

:##:
\begin_inset Quotes erd
\end_inset


\end_layout

\begin_layout Itemize
contains 
\begin_inset Quotes eld
\end_inset

:##:
\begin_inset Quotes erd
\end_inset


\end_layout

\end_deeper
\end_deeper
\begin_layout Subsubsection
Text
\end_layout

\begin_layout Standard
...
 an UTF8 character sequence (mapped to text/clob).
 
\end_layout

\begin_layout Paragraph*
View
\end_layout

\begin_layout Standard
Usually a text is displayed in a textarea.
\end_layout

\begin_layout Paragraph
Constraints
\end_layout

\begin_layout Standard
Same as 
\emph on
String
\end_layout

\begin_layout Subsubsection

\emph on
Html/Xml
\end_layout

\begin_layout Standard
...
 an html/xml content.
 Also to create static HTML-formatted text to be displayed in record views.
 
\end_layout

\begin_layout Paragraph*
View
\end_layout

\begin_layout Standard
Usually an html is displayed in an html editor, a frame/iframe or included
 directly in the page.
\end_layout

\begin_layout Paragraph
Constraints
\end_layout

\begin_layout Standard
Same as 
\emph on
String?
\end_layout

\begin_layout Subsubsection
Encoded/Password
\end_layout

\begin_layout Standard

\emph on
...
 
\emph default
an UTF8 character sequence not displayable and persisted in crypted form.
 Encryption algorithm can be MD5, blowfish...
 Depending on the encryption used, there is no way to retrieve the original
 value.
\end_layout

\begin_layout Paragraph*
View
\end_layout

\begin_layout Standard
Usually a password is displayed in a password input.
\end_layout

\begin_layout Paragraph
Constraints
\end_layout

\begin_layout Standard
Same as 
\emph on
String
\end_layout

\begin_layout Standard
Typical constraints on password: at least 5 characters, contains at least
 one digit and one non-digit.
\end_layout

\begin_layout Itemize
length>5
\end_layout

\begin_layout Itemize
find([0-9]+)
\end_layout

\begin_layout Itemize
find([^0-9]+)
\end_layout

\begin_layout Subsubsection

\emph on
Locale
\end_layout

\begin_layout Standard
...
 a locale e.g.: en, en_US, en_GB, en_GB_scottish
\end_layout

\begin_layout Paragraph*
View
\end_layout

\begin_layout Standard
Usually a locale is displayed in a combobox or with small flags
\end_layout

\begin_layout Subsubsection

\emph on
LocalizedString
\end_layout

\begin_layout Standard
...
 set of tuple (
\emph on
Locale
\emph default
,
\emph on
 String
\emph default
)
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Localized string
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
def getString(locale:Locale):Option[String] = {
\end_layout

\begin_layout LyX-Code
  val combinaisons = combinaisons(locale)
\end_layout

\begin_layout LyX-Code
  findFirst(combinaisons) match {
\end_layout

\begin_layout LyX-Code
    case Some(found) => Some(found)
\end_layout

\begin_layout LyX-Code
    case _ => findFirst(combinaisons.map { k => fallback(k) })
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
def findFirst(combinaisons:Array[String]) = {
\end_layout

\begin_layout LyX-Code
  combinaisons.find { k => containsKey(k) } match {
\end_layout

\begin_layout LyX-Code
    case Some(key) => get(key)
\end_layout

\begin_layout LyX-Code
    case _ => None
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
def combinaisons(locale:Locale) = {
\end_layout

\begin_layout LyX-Code
  val (lang,country,variant) = split(locale)
\end_layout

\begin_layout LyX-Code
  Array(lang+country+variant,lang+country,lang)
\end_layout

\begin_layout LyX-Code
}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Constraints
\end_layout

\begin_layout Standard
Same as 
\emph on
String
\emph default
 on label part.
\end_layout

\begin_layout Subsubsection

\emph on
LocalizedText
\end_layout

\begin_layout Standard
Similar to 
\emph on
LocalizedString
\emph default
 but applied on 
\emph on
Text
\end_layout

\begin_layout Paragraph
Constraints
\end_layout

\begin_layout Standard
Same as 
\emph on
String
\emph default
 on label part.
\end_layout

\begin_layout Subsubsection

\emph on
Identifier
\end_layout

\begin_layout Standard
special case of 
\emph on
String
\emph default
 that use only a very limited subset of ANSI characters [a-zA-Z_]+[a-zA-Z0-9_]*.
 This type is mainly used to have a valid but human readable identifier
 on objects, e.g.
 Entity's name or Property's name.
\end_layout

\begin_layout Paragraph*
View
\end_layout

\begin_layout Standard
Same as 
\emph on
Integer
\end_layout

\begin_layout Paragraph
Constraints
\end_layout

\begin_layout Standard
Same as 
\emph on
String
\emph default
.
\end_layout

\begin_layout Subsubsection

\emph on
Integer
\end_layout

\begin_layout Standard
...
 natural numbers ie -7, 0, 3, 14, 98756.
 
\end_layout

\begin_layout Paragraph*
View
\end_layout

\begin_layout Itemize
a basic text field allowing only integer number
\end_layout

\begin_layout Itemize
a spinner field...
\end_layout

\begin_layout Itemize
component that display a predefined set of value: combobox, radiobox
\end_layout

\begin_layout Itemize
component that display a predefined set of value and allow multiple selection:
 checkbox, list...
\end_layout

\begin_layout Paragraph*
Constraints
\end_layout

\begin_layout Itemize
value [>, >=, <, <=] 
\emph on
a
\end_layout

\begin_layout Itemize
in range [
\emph on
a
\emph default
,
\emph on
b
\emph default
], [
\emph on
a
\emph default
,
\emph on
b
\emph default
[, ]
\emph on
a
\emph default
,
\emph on
b
\emph default
], ]
\emph on
a
\emph default
,
\emph on
b
\emph default
[
\end_layout

\begin_layout Itemize
autoincrement
\end_layout

\begin_layout Subsubsection

\emph on
Double
\end_layout

\begin_layout Paragraph*
View
\end_layout

\begin_layout Standard
Same as 
\emph on
Integer
\end_layout

\begin_layout Paragraph*
Constraints
\end_layout

\begin_layout Standard
Same as 
\emph on
Integer
\end_layout

\begin_layout Subsubsection

\emph on
Boolean
\end_layout

\begin_layout Paragraph*
View
\end_layout

\begin_layout Itemize
combobox
\end_layout

\begin_layout Itemize
checkbox
\end_layout

\begin_layout Itemize
radioboxes
\end_layout

\begin_layout Paragraph*
Constraints
\end_layout

\begin_layout Standard
none?
\end_layout

\begin_layout Subsubsection

\emph on
Timestamp
\end_layout

\begin_layout Standard
...
 the number of milliseconds that have passed since January 1, 1970 00:00:00.000
 GMT.
\end_layout

\begin_layout Itemize

\emph on
DateTime
\emph default
: 2010/02/03 17:45:17
\end_layout

\begin_deeper
\begin_layout Itemize
database built-in timestamp
\end_layout

\begin_layout Itemize
String in ISO8601 format (yyyy-MM-ddTHH:mm:ss.SSS)
\end_layout

\begin_layout Itemize
see org.joda.time.LocalDateTime
\end_layout

\end_deeper
\begin_layout Itemize

\emph on
Date
\emph default
: 2010/02/03.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Special case of DateTime where Time is not taken into account
\end_layout

\begin_layout Itemize
String in ISO8601 format (yyyy-MM-dd)
\end_layout

\begin_layout Itemize
see org.joda.time.LocalDate
\end_layout

\end_deeper
\begin_layout Itemize

\emph on
Time
\emph default
: 17:45:17.
 
\end_layout

\begin_deeper
\begin_layout Itemize
Special case of DateTime where Date is not taken into account
\end_layout

\begin_layout Itemize
String in ISO8601 format (HH:mm:ss.SSSZZ)
\end_layout

\begin_layout Itemize
see org.joda.time.LocalTime
\end_layout

\end_deeper
\begin_layout Paragraph*
View
\end_layout

\begin_layout Standard
Usually a date is displayed using a datepicker, and a time using either
 mask or string inputs, spinners...
\end_layout

\begin_layout Paragraph*
Constraints
\end_layout

\begin_layout Itemize
before
\end_layout

\begin_layout Itemize
after
\end_layout

\begin_layout Itemize
between
\end_layout

\begin_layout Itemize
match cron expression?
\end_layout

\begin_layout Subsubsection
Binary
\end_layout

\begin_layout Standard
...
 raw binary data, can be used as placeholder for api/script...
\end_layout

\begin_layout Subsubsection
Attachment [NEEDWORK:special case of Reference?]
\end_layout

\begin_layout Standard
...
 allow file upload
\end_layout

\begin_layout Subsubsection
Reference/URN
\end_layout

\begin_layout Standard
...
 allow to define reference on first-level object (user, customer, account,
 request, message, document, attachment) or user defined entities.
\end_layout

\begin_layout Standard
The reference descriptor should probably be strongly typed, to prevent the
 usage of different kind of reference on the same entities.
 The following case should be disallowed :
\end_layout

\begin_layout Itemize
Entity(
\begin_inset Quotes eld
\end_inset

Company
\begin_inset Quotes erd
\end_inset

).get(
\begin_inset Quotes eld
\end_inset

Protoss
\begin_inset Quotes erd
\end_inset

).responsible = ref:user/3f2504e0
\end_layout

\begin_layout Itemize
Entity(
\begin_inset Quotes eld
\end_inset

Company
\begin_inset Quotes erd
\end_inset

).get(
\begin_inset Quotes eld
\end_inset

Zerg
\begin_inset Quotes erd
\end_inset

).responsible = ref:group/85b12d34
\end_layout

\begin_layout Standard
The company Protoss references a User as responsible whereas the company
 Zerg references a Group as responsible.
\end_layout

\begin_layout Standard
Thus type definition would/could require an optional constraints on type:
\end_layout

\begin_layout Itemize
ref:user reference to any user
\end_layout

\begin_layout Itemize
ref:user?namespace=asgard reference to any user that belongs to the 
\begin_inset Quotes eld
\end_inset

asgard
\begin_inset Quotes erd
\end_inset

 namespace (@see Namespace)
\end_layout

\begin_layout Itemize
ref:entity/Address, 
\end_layout

\begin_layout Itemize
ref:entity/Company/Address/Street
\end_layout

\begin_layout Itemize
Examples:
\end_layout

\begin_deeper
\begin_layout Itemize
ref:user/3f2504e0
\end_layout

\begin_layout Itemize
ref:entity/Address
\end_layout

\begin_layout Itemize
ref:entity/Company/110e8400-e29b/Address/Street ...
\end_layout

\begin_layout Itemize
ref:document/aef8445/text+html
\end_layout

\end_deeper
\begin_layout Itemize
[ROUGH] Find a suitable syntax
\end_layout

\begin_deeper
\begin_layout Itemize
ref:entity/Company[@namespace=asgard]/Address/Street.
 
\end_layout

\begin_layout Itemize
ref:entity/asgard.Company/Address/Street.
 
\end_layout

\begin_layout Itemize
XPath like? urn compatible (RFC 
\series bold
3986
\series default
)?
\end_layout

\begin_layout Itemize
urn examples:
\end_layout

\begin_deeper
\begin_layout Itemize
ldap://[2001:db8::7]/c=GB?objectClass?one
\end_layout

\begin_layout Itemize
mailto:John.Doe@example.com
\end_layout

\begin_layout Itemize
news:comp.infosystems.www.servers.unix
\end_layout

\begin_layout Itemize
tel:+1-816-555-1212
\end_layout

\begin_layout Itemize
telnet://192.0.2.16:80/
\end_layout

\begin_layout Itemize
urn:oasis:names:specification:docbook:dtd:xml:4.1.2
\end_layout

\end_deeper
\end_deeper
\begin_layout Paragraph*
Constraints
\end_layout

\begin_layout Itemize
on referencee type
\end_layout

\begin_deeper
\begin_layout Itemize
first level: user, customer, account, request, message, document, attachment,
 ...
\end_layout

\begin_layout Itemize
user-defined entities
\end_layout

\begin_layout Itemize
e.g.
\end_layout

\begin_deeper
\begin_layout Itemize
type:user, type:customer, ...
\end_layout

\begin_layout Itemize
type:entity/asgard.Request
\end_layout

\begin_layout Itemize
type:entity/asgard.Request/Address
\end_layout

\end_deeper
\end_deeper
\begin_layout Itemize
on namespace:
\end_layout

\begin_deeper
\begin_layout Itemize
e.g.
 belongsToNamespace(
\begin_inset Quotes eld
\end_inset

asgard
\begin_inset Quotes erd
\end_inset

)|
\end_layout

\end_deeper
\begin_layout Subsubsection
Link
\end_layout

\begin_layout Standard
...
 support for 'external link', an url is built based on the current context
 and can be called by clicking on it.
 This can be seen as the 
\begin_inset Quotes eld
\end_inset

ES's Back Link
\begin_inset Quotes erd
\end_inset

 feature but at the entity level.
\end_layout

\begin_layout Itemize
http://thor:8080/crm/user?id=${customer_id}&open=true
\end_layout

\begin_layout Itemize
options:
\end_layout

\begin_deeper
\begin_layout Itemize
(x) return result [select:result type]
\end_layout

\begin_deeper
\begin_layout Itemize
memoization (see
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Memoization"

\end_inset

)
\end_layout

\end_deeper
\end_deeper
\begin_layout Paragraph*
View
\end_layout

\begin_layout Itemize
an clickable hyperlink that opens a new or dialog/internal frame
\end_layout

\begin_layout Itemize
an iframe
\end_layout

\begin_layout Itemize
an embedded raw result: 
\end_layout

\begin_deeper
\begin_layout Itemize
such as displaying the html fragment returned
\end_layout

\begin_layout Itemize
raw data returned surrounded by html code
\end_layout

\end_deeper
\begin_layout Itemize
a view corresponding to the return type specified
\end_layout

\begin_layout Paragraph*
Constraints
\end_layout

\begin_layout Standard
Any?
\end_layout

\begin_layout Subsubsection
Script
\end_layout

\begin_layout Standard
...
 support for 'external field' whose value can be evaluated on-demand using
 the current entity as context for evaluation.
\end_layout

\begin_layout Standard
Script has an uri to locate the script that will be executed, a set of key/value
 pairs as settings, and a return type.
\end_layout

\begin_layout Standard
Return type should be any Attribute type except Script
\end_layout

\begin_layout Itemize
options:
\end_layout

\begin_deeper
\begin_layout Itemize
(x) return result [select:result type]
\end_layout

\begin_layout Itemize
(_) memoization (see
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Memoization"

\end_inset

)
\end_layout

\begin_layout Itemize
(_) [MOVETO:attribute_window] style [select:{link, button}]
\end_layout

\end_deeper
\begin_layout Itemize
examples:
\end_layout

\begin_deeper
\begin_layout Itemize
script:js/openCRM.js
\end_layout

\begin_layout Itemize
script:groovy/calculateBestTemplate.groovy
\end_layout

\end_deeper
\begin_layout Standard
Note: both script and Link could also be attached on entity view directly
 and not defined at the entity level, more on this in entity view.
\end_layout

\begin_layout Paragraph*
Constraints
\end_layout

\begin_layout Standard
Any?
\end_layout

\begin_layout Subsubsection
Memoization
\begin_inset CommandInset label
LatexCommand label
name "sub:Memoization"

\end_inset


\end_layout

\begin_layout Quote
Memoization is an optimization technique used primarily to speed up computer
 programs by having function calls avoid repeating the calculation of results
 for previously-processed inputs (wikipedia).
 
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Naïve implementation of Memoization
\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
def preferredLocale:Locale = memoizedValue(PREFERRED_LOCALE,
\end_layout

\begin_layout LyX-Code
    calculatePreferredLocale).asInstanceOf[Locale]
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
def memoizedValue(key:String, provider:()=>Any):Any => {
\end_layout

\begin_layout LyX-Code
  memoizationStrategy match {
\end_layout

\begin_layout LyX-Code
    case Never => provider()
\end_layout

\begin_layout LyX-Code
    case User  => getOrInit(User.currentUser, key, provider)
\end_layout

\begin_layout LyX-Code
    case Appli => getOrInit(Application.currentApplication, key, provider)
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
...
\end_layout

\begin_layout LyX-Code
def getOrInit(context:Context, key:String, provider:()=>Any):Any => {
\end_layout

\begin_layout LyX-Code
  val valueOpt = context.get(key)
\end_layout

\begin_layout LyX-Code
  if(valueOpt.isDefined)
\end_layout

\begin_layout LyX-Code
    valueOpt.get
\end_layout

\begin_layout LyX-Code
  else {
\end_layout

\begin_layout LyX-Code
    val value = provider()
\end_layout

\begin_layout LyX-Code
    context.set(key,value)
\end_layout

\begin_layout LyX-Code
    value
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
}
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph*
Strategy:
\end_layout

\begin_layout Itemize
never: do not perform any memoization
\end_layout

\begin_layout Itemize
user_session: function value is cached in the current user session
\end_layout

\begin_layout Itemize
application: function value is cached at the application level
\end_layout

\begin_layout Paragraph
Options:
\end_layout

\begin_layout Itemize
timeout/ttl
\end_layout

\begin_layout Subsection
Property Descriptor
\end_layout

\begin_layout Standard
A property descriptor, Depending on the data type selected, you will need
 to specify values for some of the fields listed below.
\end_layout

\begin_layout Itemize
namespace
\end_layout

\begin_layout Itemize
property name: a unique and human readable Identifier
\end_layout

\begin_layout Itemize
labels: the label that will be displayed in the User Interface
\end_layout

\begin_layout Itemize
description/help texts: Enter descriptive text for the property.
 This text displays when the user points the cursor at the property.
\end_layout

\begin_layout Itemize
indication if the value in specific context: [multiselect:{all, api, creation_fo
rm, update_form, answer_form, ...}] is:
\end_layout

\begin_deeper
\begin_layout Itemize
required/mandatory
\end_layout

\begin_layout Itemize
editable/updatable
\end_layout

\begin_layout Itemize
visible
\end_layout

\end_deeper
\begin_layout Itemize
searchable
\end_layout

\begin_layout Itemize
indexable
\end_layout

\begin_layout Itemize
virtual/persisted/not_persisted
\end_layout

\begin_layout Itemize
list of constraints applied on the property
\end_layout

\begin_layout Itemize
hooks pluggable on property:
\end_layout

\begin_deeper
\begin_layout Itemize
onLoad
\end_layout

\begin_layout Itemize
onChange
\end_layout

\begin_layout Itemize
onSave
\end_layout

\end_deeper
\begin_layout Subsection
Entity Descriptor
\end_layout

\begin_layout Itemize
entity name (Identifier)
\end_layout

\begin_layout Itemize
label: the label that will be displayed in the User Interface
\end_layout

\begin_layout Itemize
description/help text: Enter descriptive text for the entity.
 This text displays when the user points the cursor at the entity.
\end_layout

\begin_layout Itemize
virtual/persisted/not_persisted
\end_layout

\begin_layout Itemize
inherits? from an other entity description
\end_layout

\begin_layout Itemize
list of constraints applied on the entity
\end_layout

\begin_layout Itemize
list of properties of the entity
\end_layout

\begin_deeper
\begin_layout Itemize
If the entity belongs to a namespace, depending on settings of admin, the
 list of property available can be filtered
\end_layout

\begin_layout Itemize
If the entity is virtual, only virtual properties are available
\end_layout

\end_deeper
\begin_layout Itemize
hooks pluggable on entity:
\end_layout

\begin_deeper
\begin_layout Itemize
preLoad/postLost
\end_layout

\begin_layout Itemize
onChange
\end_layout

\begin_layout Itemize
preSave/preSaveVetoable, postSave...
\end_layout

\begin_layout Itemize
preDelete/preDeleteVetoable, postDelete
\end_layout

\begin_layout Itemize
def isValid(entity):ValidationResult
\end_layout

\end_deeper
\begin_layout Subsection
Entities Examples
\end_layout

\begin_layout Standard
This part describes some entity descriptors, in order to illustrate the
 definition of entity.
 When entities will be referred in the document, their definitions are assumed
 to be those ones.
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sample entities class diagram
\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Graphics
	filename diagrams/entity-samples.png
	scale 50

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Address
\end_layout

\begin_layout Standard
Define an 
\emph on
Entity descriptor
\emph default
 named 
\begin_inset Quotes eld
\end_inset


\emph on
Address
\emph default

\begin_inset Quotes erd
\end_inset

 with the following 
\emph on
Property descriptors
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" width="7em">
<column alignment="center" valignment="top" width="6em">
<column alignment="center" valignment="top" width="14em">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Constraints
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Street
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Cmplt
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ZipCode
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
length<=5
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
City
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Company
\end_layout

\begin_layout Standard
Define an 
\emph on
Entity descriptor
\emph default
 named 
\begin_inset Quotes eld
\end_inset


\emph on
Company
\emph default

\begin_inset Quotes erd
\end_inset

 with the following 
\emph on
Property descriptors
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features>
<column alignment="center" valignment="top" width="7em">
<column alignment="center" valignment="top" width="6em">
<column alignment="center" valignment="top" width="14em">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Constraints
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Address
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
e:Address
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Salutation
\end_layout

\begin_layout Standard
Define an 
\emph on
Entity descriptor
\emph default
 named 
\begin_inset Quotes eld
\end_inset

Salutation
\begin_inset Quotes erd
\end_inset

 with the following 
\emph on
Property descriptors
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features>
<column alignment="center" valignment="top" width="7em">
<column alignment="center" valignment="top" width="6em">
<column alignment="center" valignment="top" width="14em">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Constraints
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Code
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Int
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Label
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Localized-
\end_layout

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Customer 
\end_layout

\begin_layout Standard
Define an 
\emph on
Entity descriptor
\emph default
 named 
\begin_inset Quotes eld
\end_inset


\emph on
Customer
\emph default

\begin_inset Quotes erd
\end_inset

 with the following 
\emph on
Property descriptors
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="8" columns="3">
<features>
<column alignment="center" valignment="top" width="7em">
<column alignment="center" valignment="top" width="6em">
<column alignment="center" valignment="top" width="14em">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Constraints
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
FirstName
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
LastName
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Email
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
~*[^@]+@[^@]+
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Salutation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
e:Salutation
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Company
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
e:Company
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Address
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
e:Address
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
CRMLink
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Link*
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsubsection
Request
\end_layout

\begin_layout Standard
\begin_inset Float figure
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Sample entities request class diagram
\end_layout

\end_inset


\begin_inset Graphics
	filename diagrams/entity-sample-request.png
	scale 50

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
RequestStd : Standard Request
\end_layout

\begin_layout Standard
Define an 
\emph on
Entity descriptor
\emph default
 named 
\begin_inset Quotes eld
\end_inset


\emph on
RequestStd
\emph default

\begin_inset Quotes erd
\end_inset

 with the following 
\emph on
Property descriptors
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="2" columns="3">
<features>
<column alignment="center" valignment="top" width="7em">
<column alignment="center" valignment="top" width="6em">
<column alignment="center" valignment="top" width="14em">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Constraints
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Topic
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph
RequestSAVNox: SAV Request of the Nox Corp.
\end_layout

\begin_layout Standard
Define an 
\emph on
Entity descriptor
\emph default
 named 
\begin_inset Quotes eld
\end_inset


\emph on
RequestSAVNox
\emph default

\begin_inset Quotes erd
\end_inset

 that inherits 
\begin_inset Quotes eld
\end_inset


\emph on
RequestStd
\emph default

\begin_inset Quotes erd
\end_inset

 with the following 
\emph on
Property descriptors
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="5" columns="3">
<features>
<column alignment="center" valignment="top" width="7em">
<column alignment="center" valignment="top" width="6em">
<column alignment="center" valignment="top" width="14em">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Constraints
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
MessageRef
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
InvoiceRef
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
String
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
~[0-9]{8}-[a-zA-Z]{2}-[0-9]{4}
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
TxAmount
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Numeric
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
>=0
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ProductRef
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
e:ProductNox
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
RequestSAVAsgard: SAV Request of the Asgard Corp
\end_layout

\begin_layout Standard
Define an 
\emph on
Entity descriptor
\emph default
 named 
\begin_inset Quotes eld
\end_inset


\emph on
RequestSAVAsgard
\emph default

\begin_inset Quotes erd
\end_inset

 that inherits 
\begin_inset Quotes eld
\end_inset


\emph on
RequestStd
\emph default

\begin_inset Quotes erd
\end_inset

 with the following 
\emph on
Property descriptors
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features>
<column alignment="center" valignment="top" width="7em">
<column alignment="center" valignment="top" width="6em">
<column alignment="center" valignment="top" width="14em">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Constraints
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
SGTeam
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
e:SGTeam
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Emergency
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
script/js:
\end_layout

\begin_layout Plain Layout
ContactThor
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph
RequestESSAsgard: ESS Request of the Asgard Corp
\end_layout

\begin_layout Standard
Define an 
\emph on
Entity descriptor
\emph default
 named 
\begin_inset Quotes eld
\end_inset


\emph on
RequestESSAsgard
\emph default

\begin_inset Quotes erd
\end_inset

 that inherits 
\begin_inset Quotes eld
\end_inset


\emph on
RequestStd
\emph default

\begin_inset Quotes erd
\end_inset

 with the following 
\emph on
Property descriptors
\emph default
:
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="3" columns="3">
<features>
<column alignment="center" valignment="top" width="7em">
<column alignment="center" valignment="top" width="6em">
<column alignment="center" valignment="top" width="14em">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Constraints
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Severity
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Numeric
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
[0-100[
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
ProductRef
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
e:ProductAsgard
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Subsection
Constraints
\end_layout

\begin_layout Standard
Constraints can be added on both entity and property description.
 It allows to ensure values are valid and match some criteria.
 Data type specific constraints are described in the corresponding data
 type section.
 This section describes generic or common constraints that could be applied
 on property or entity.
\end_layout

\begin_layout Subsubsection
Access control
\end_layout

\begin_layout Standard
It provides also a way to hide information based on access control.
 Can be applied on entity and property.
\end_layout

\begin_layout Itemize
require_permission:<permission_name>
\end_layout

\begin_layout Itemize
part_of:<group_name>
\end_layout

\begin_layout Itemize
part_or_subgroup_of:<group_name>
\end_layout

\begin_layout Subsubsection
Script/Hook Constraints
\end_layout

\begin_layout Standard
Script/Hook can be used for complex validation of property value or entity
 state.
\end_layout

\begin_layout Standard
It allows for example to validate the value of a property based on the values
 of other properties, and to validate the set of properties even if all
 single properties are valid.
\end_layout

\begin_layout Standard
Such constraints can be applied on a specific property
\end_layout

\begin_layout Itemize
def isValid(property, entity):ValidationResult 
\end_layout

\begin_deeper
\begin_layout Itemize
e.g.
 Maiden's name validation only if the genre property is set to 
\begin_inset Quotes eld
\end_inset

woman
\begin_inset Quotes erd
\end_inset

 see algorithm 
\begin_inset CommandInset ref
LatexCommand ref
reference "alg:Maiden's-Name-validation"

\end_inset


\end_layout

\end_deeper
\begin_layout Itemize
def isValid(entity):ValidationResult
\end_layout

\begin_layout Standard
\begin_inset Float algorithm
wide false
sideways false
status open

\begin_layout Plain Layout

\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Maiden's Name validation
\begin_inset CommandInset label
LatexCommand label
name "alg:Maiden's-Name-validation"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout LyX-Code
def isValid(maidenNameProperty, entity) = {
\end_layout

\begin_layout LyX-Code
  entity.property(
\begin_inset Quotes eld
\end_inset

genre
\begin_inset Quotes erd
\end_inset

) match {
\end_layout

\begin_layout LyX-Code
    // special validation, only if the value of the property
\end_layout

\begin_layout LyX-Code
    // has 
\begin_inset Quotes eld
\end_inset

woman
\begin_inset Quotes erd
\end_inset

 as name identifier 
\end_layout

\begin_layout LyX-Code
    // (see human readable identifier)
\end_layout

\begin_layout LyX-Code
    case Name(
\begin_inset Quotes eld
\end_inset

woman
\begin_inset Quotes erd
\end_inset

) => 
\end_layout

\begin_layout LyX-Code
      if(property.notEmpty)
\end_layout

\begin_layout LyX-Code
        OkResult
\end_layout

\begin_layout LyX-Code
      else
\end_layout

\begin_layout LyX-Code
        MissingValueResult
\end_layout

\begin_layout LyX-Code
    case _ => OkResult
\end_layout

\begin_layout LyX-Code
  }
\end_layout

\begin_layout LyX-Code
}
\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
Predefined values
\end_layout

\begin_layout Standard
The authorized value must be one of a selected set of permitted values.
\end_layout

\begin_layout Subsection
Views
\end_layout

\begin_layout Standard
Fundamental customization capabilities include selecting the properties
 to display when displaying an entity in a list or alone.
\end_layout

\begin_layout Standard
EntityView and PropertyView
\end_layout

\begin_layout Standard
The entity view renders an instance of a specific entity into a form suitable
 for interaction, typically a user interface element.
 Multiple views can exist for a single definition of entity for different
 purposes.
 Depending on the context it is seen, the entity could be displayed differently.
 An entity view defines the set of properties it displays and (if possible)
 the layout.
 For example, for a particular entity definition, one could define a view
 for the search result display, for the request details display, for a dedicated
 SSM...
\end_layout

\begin_layout Standard
This will allow an entity to be displayed differently depending on the context,
 some properties could be hidden for example.Roughly the rendering of the
 view corresponds to the html code used to display an entity instance.
 [IDEA] the view could also be used to filter data through api call.
\end_layout

\begin_layout Standard
The framework should provides a basic view for all entity based on their
 descriptors and their properties descriptors.
 Such kind of view can be a simple list of property, displaying their label
 and the most appropriate corresponding editor.
\end_layout

\begin_layout Standard
An advanced framework could allow drag and drop to position properties and
 their labels, based on grid for example.
\end_layout

\begin_layout Standard
[NEEDWORK]
\end_layout

\begin_layout Standard
Views are a type of predefined query that are available to all users.
 They are available almost everywhere you see a list of records.
 You will usually see a drop-down list that displays system views that are
 available.
 Each of these views has different filter criteria or presents different
 columns of data.
 You can design how your forms look by selecting different tabs, sections,
 and fields.
 The user interface lets you add, remove, and rearrange these elements to
 design forms that fit the business.
\end_layout

\begin_layout Standard
Property options:
\end_layout

\begin_layout Itemize
editable/enable/
\end_layout

\begin_layout Subsection
Storage [PROPOSAL]
\end_layout

\begin_layout Subsubsection
Descriptors
\end_layout

\begin_layout Standard
Storage of all entity descriptors and property descriptor would be done
 in a dedicated repository.
 All entities would use the same repository to store their description,
 no matters the namespace or the tenant.
\end_layout

\begin_layout Paragraph
EntityDescriptor
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="6" columns="3">
<features>
<column alignment="center" valignment="top" width="7em">
<column alignment="center" valignment="top" width="6em">
<column alignment="center" valignment="top" width="14em">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
descriptor_id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PK:int32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unique identifier of the descriptor
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
identifier
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A human readable and environment independant identifier
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
namespace
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fk:namespace
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
The namespace this descriptor belongs to
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
label
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fk:localized_string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Localized labels of the descriptor can be used in EntityView definition
 for example
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
storage
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
enum:StorageType
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Indicates if instances of this entity are stored in a dedicated table or
 use the generic mode
\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
StorageType
\end_layout

\begin_layout Itemize
generic (eav)
\end_layout

\begin_layout Itemize
key/value-store (xml,json,pbuf,...)
\end_layout

\begin_layout Itemize
table mapping: maps the entity to a database table and each property (flatten
 first nested entity will be handled later) to a dedicated column.
 One should have the possibility to set also a converter for the column
 map.
\end_layout

\begin_layout Itemize
virtual/external: the entity is not persisted and made of virtual/external
 attributes only.
\end_layout

\begin_layout Paragraph*
EntityDescriptorParameter 
\end_layout

\begin_layout Standard
It inherits GenericParameterTable.
 Since no search would be performed against their values, the parameter
 value could be stored in a raw xml or pbuf...
\end_layout

\begin_layout Paragraph*
Property Descriptor
\end_layout

\begin_layout Standard
\begin_inset Tabular
<lyxtabular version="3" rows="7" columns="3">
<features>
<column alignment="center" valignment="top" width="7em">
<column alignment="center" valignment="top" width="6em">
<column alignment="center" valignment="top" width="14em">
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
Description
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
property_descriptor_id
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
PK:int32
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
unique identifier of the descriptor
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
name
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
identifier
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
A human readable and environment independant identifier
\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
label
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
fk:localized_string
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
property_type
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
enum[String, Identifier, Integer, Timestamp, Reference, ...]
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
multi_value
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout
bool
\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
<row>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
<cell alignment="center" valignment="top" topline="true" bottomline="true" leftline="true" rightline="true" usebox="none">
\begin_inset Text

\begin_layout Plain Layout

\end_layout

\end_inset
</cell>
</row>
</lyxtabular>

\end_inset


\end_layout

\begin_layout Paragraph*
[REMARKS/CHOICE] why an int32 instead of a uuid for identifier
\end_layout

\begin_layout Itemize
descriptor_id will referenced by almost all rows of the database items:
 for each request, customer, account...
 
\end_layout

\begin_deeper
\begin_layout Itemize
int32 is a lot cheaper than a string[32]
\end_layout

\begin_layout Itemize
join would be a lot more efficient
\end_layout

\end_deeper
\begin_layout Itemize
Since the number of descriptor would be less than the capacity of an int32
 and the creation of descriptor wouldn't require a very high concurrency
 locking mechanism, thus a sequence would enough.
\end_layout

\begin_layout Standard
Entity-AttributeValue
\end_layout

\begin_layout Itemize
full eav: one table per data type
\end_layout

\begin_deeper
\begin_layout Itemize
[RoUGH] first the metadata is read, according to it the SQL is generated
 by joining on appropriate table based on its type+attribute_descriptor_id+entit
y_id
\end_layout

\end_deeper
\begin_layout Itemize
one table for all value types with dedicated column for main type (see ES...)
\end_layout

\begin_layout Itemize
one table key/value where value would be a blob 
\end_layout

\begin_layout Subsection
Integration
\end_layout

\end_body
\end_document
