#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\use_default_options true
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize default
\use_hyperref false
\papersize default
\use_geometry false
\use_amsmath 1
\use_esint 1
\cite_engine basic
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\author "" 
\end_header

\begin_body

\begin_layout Section*
What is multi-tenancy? 
\end_layout

\begin_layout Quote
"Multitenancy refers to a principle in software architecture where a single
 instance of the software runs on a software-as-a-service (SaaS) vendor's
 servers, serving multiple client organizations (tenants)." (Wikipedia) 
\end_layout

\begin_layout Paragraph
In practice: 
\end_layout

\begin_layout Itemize
“hardcore whitelabeling” 
\end_layout

\begin_layout Itemize
multiple clients on one installation of the application 
\end_layout

\begin_layout Itemize
each client needs customization in the software 
\end_layout

\begin_layout Itemize
goal is a single code base and a clean implementation of the tenants customizati
ons
\end_layout

\begin_layout Paragraph
Main challenges in customization:
\end_layout

\begin_layout Itemize
Differences in the functionality
\end_layout

\begin_layout Itemize
Workflow / modification of functionality
\end_layout

\begin_layout Itemize
Separation of data
\end_layout

\begin_layout Itemize
Branding 
\end_layout

\begin_layout Standard
\begin_inset Box Frameless
position "t"
hor_pos "c"
has_inner_box 1
inner_pos "t"
use_parbox 0
width "100col%"
special "none"
height "1in"
height_special "totalheight"
status open

\begin_layout LyX-Code
trait Tenant {
\end_layout

\begin_layout LyX-Code
  def identifier:Identifier
\end_layout

\begin_layout LyX-Code
  def getPlugins:List[Plugin]
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
trait Request {
\end_layout

\begin_layout LyX-Code
  // the workflow the request belongs to
\end_layout

\begin_layout LyX-Code
  def workflow:WorkflowIdentifier 
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
trait WorkflowProvider {
\end_layout

\begin_layout LyX-Code
  def getWorkflow(identifier:WorkflowType):Workflow
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
trait Workflow[T<:Transitionable] {
\end_layout

\begin_layout LyX-Code
  def availableTransitions(item:T):List[Transition]
\end_layout

\begin_layout LyX-Code
  def calculateTransition(item:T)
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
sealed abstract class WorkflowIdentifier(id:Identifier)
\end_layout

\begin_layout LyX-Code
case class RequestWorkflow (id:Identifier) extends WorkflowIdentifier(id)
\end_layout

\begin_layout LyX-Code
case class DocumentWorkflow(id:Identifier) extends WorkflowIdentifier(id)
\end_layout

\begin_layout LyX-Code

\end_layout

\begin_layout LyX-Code
object Context {
\end_layout

\begin_layout LyX-Code
  val current:ThreadLocal[Context] = ...
\end_layout

\begin_layout LyX-Code
}
\end_layout

\begin_layout LyX-Code
trait Context {
\end_layout

\begin_layout LyX-Code
  def user:User
\end_layout

\begin_layout LyX-Code
  def tenant:Tenant = user.tenant
\end_layout

\begin_layout LyX-Code
}
\end_layout

\end_inset


\end_layout

\end_body
\end_document
